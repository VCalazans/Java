/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import model.Editor;
import model.ID3V1_1;
import model.Recursos;

/**
 *
 * @author vcalazans
 */
public class UIEditor extends javax.swing.JFrame implements WindowListener {

    private ArrayList<File> arrFiles = new ArrayList();
    private Editor editor;
    private ID3V1_1 mp3;
    private String dirPosTela;

    /**
     * Creates new form UIEditor
     */
    public UIEditor() {

        initComponents();
        //setLocationRelativeTo(null);
        mp3 = new ID3V1_1();
        addWindowListener(this);
        dirPosTela = new File(this.getClass().getName() + ".pos").getAbsolutePath();

        //Inserção de dados nulos para adicionar um Scroll Vertical.
        jtbMusics.setModel(new DefaultTableModel(
                new Object[][]{
                    {null},
                    {null},
                    {null},
                    {null},
                    {null},
                    {null},
                    {null},
                    {null},
                    {null},
                    {null}
                },
                new String[]{
                    "Músicas"
                }
        ));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtbMusics = new javax.swing.JTable();
        btAbrir = new java.awt.Button();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        edTitulo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        edArtista = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        edAlbum = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        edAno = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        edComentario = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        edFlagTrilha = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        edNroFaixa = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        cmbGenero = new javax.swing.JComboBox<>();
        lbAlteracao = new javax.swing.JLabel();
        btGavar = new javax.swing.JButton();
        ckAlteracao = new javax.swing.JCheckBox();
        btRemoveMarcacoes = new javax.swing.JButton();
        lbMarcacao = new javax.swing.JLabel();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jtbMusics.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Musicas"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtbMusics.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtbMusicsMouseClicked(evt);
            }
        });
        jtbMusics.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtbMusicsKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jtbMusics);

        btAbrir.setLabel("Adicionar");
        btAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAbrirActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Meta Dados"));

        jLabel1.setText("Titulo : ");

        edTitulo.setEditable(false);

        jLabel2.setText("Artista :");

        edArtista.setEditable(false);
        edArtista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edArtistaActionPerformed(evt);
            }
        });

        jLabel3.setText("Álbum :");

        edAlbum.setEditable(false);
        edAlbum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edAlbumActionPerformed(evt);
            }
        });

        jLabel4.setText("Ano : ");

        edAno.setEditable(false);

        jLabel5.setText("Comentario  : ");

        edComentario.setEditable(false);

        jLabel6.setText("Flag.Trilha :");

        edFlagTrilha.setEditable(false);

        jLabel7.setText("Nro.Faixa :");

        edNroFaixa.setEditable(false);

        jLabel8.setText("Genero :");

        cmbGenero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0 - Blues", "1 - Classic Rock", "2 - Country", "3 - Dance", "4 - Disco", "5 - Funk", "6 - Grunge", "7 - Hip-Hop", "8 - Jazz", "9 - Metal", "10 - New Age", "11 - Oldies", "12 - Other", "13 - Pop", "14 - R&B", "15 - Rap", "16 - Raggae", "17 - Rock", "18 - Techno", "19 - Industrial", "20 - Alternative", "21 - Ska", "22 - Death Metal", "23 - Pranks", "24 - Soundtrack", "25 - Euro-Techno", "26 - Ambient", "27 - Trip-Hop", "28 - Vocal", "29 - Jazz + Funk", "30  - Fusion", "31 - Trance", "32 - Classical", "33 - Instrurmental", "34 - Acid", "35 - House", "36 - Game", "37 - Sound-Clip", "38 - Gospel", "39 - Noise", "40 - Altern Rock", "41 - Bass", "42 - Soul", "43 - Punk", "44 - Space", "45 - Meditative", "46 - Instrumental Pop", "47 - Instrumental Rock", "48 - Ethnic", "49 - Gothic", "50 - Darkwave", "51 - Techno - Industrial", "52 - Electronic", "53 - Pop - Folk", "54 - Eurodance", "55 - Dream", "56 - Southern Rock", "57 - Comedy", "58 - Cult", "59 - Gangsta", "60 - Top 40", "61 - Christian Rap", "62 - Pop/Funk", "63 - Jungle", "64 - Native American", "65 - Cabaret", "66 - New Wave", "67 - Psychadelic", "68 - Rave", "69 - Showtunes", "70 - Trailer", "71 - Lo-Fi", "72 - Tribal", "73 - Acid Punk", "74 - Acid Jazz", "75 - Polka", "76 - Retro", "77 - Musical ", "78 - Rock & Roll", "79 - Hard Rock", " " }));
        cmbGenero.setEnabled(false);

        lbAlteracao.setText(" ");

        btGavar.setText("Gravar");
        btGavar.setEnabled(false);
        btGavar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btGavarActionPerformed(evt);
            }
        });

        ckAlteracao.setText("Habilitar Edição");
        ckAlteracao.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ckAlteracaoMouseClicked(evt);
            }
        });
        ckAlteracao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckAlteracaoActionPerformed(evt);
            }
        });

        btRemoveMarcacoes.setText("Remover Marcações");
        btRemoveMarcacoes.setEnabled(false);
        btRemoveMarcacoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRemoveMarcacoesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(edTitulo)
                            .addComponent(edArtista)
                            .addComponent(edAlbum)
                            .addComponent(edComentario)
                            .addComponent(cmbGenero, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(edAno, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(edFlagTrilha, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(edNroFaixa, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(ckAlteracao)
                        .addGap(10, 10, 10)
                        .addComponent(btRemoveMarcacoes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addComponent(btGavar, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbAlteracao, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(294, 294, 294))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lbAlteracao)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(edTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(edArtista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel3)
                    .addComponent(edAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(edAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(edComentario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(edFlagTrilha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(edNroFaixa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(cmbGenero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btGavar)
                    .addComponent(btRemoveMarcacoes)
                    .addComponent(ckAlteracao)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbMarcacao)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btAbrir, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 721, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btAbrir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbMarcacao))
                .addGap(10, 10, 10)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAbrirActionPerformed
        // TODO add your handling code here:
        //Componente para explorar arquivos.
        JFileChooser fChooser = new JFileChooser();
        fChooser.setDialogTitle("Procurar Músicas.");
        //Apenas para leitura.
        fChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        //Filtra o tipo de arquivo a ser buscado pelo explorador.
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Músicas", "mp3");
        fChooser.setFileFilter(filter);
        int ret = fChooser.showOpenDialog(this);
        //Adiciona na tabela o arquivo selecionado.
        if (ret == JFileChooser.APPROVE_OPTION) {
            arrFiles.add(fChooser.getSelectedFile());
            jtbMusics.setValueAt(fChooser.getSelectedFile().getName(), arrFiles.size() - 1, 0);
        }

    }//GEN-LAST:event_btAbrirActionPerformed

    private void edAlbumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edAlbumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_edAlbumActionPerformed

    private void edArtistaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edArtistaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_edArtistaActionPerformed
    private void jtbMusicsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtbMusicsKeyPressed

        //Rotina para carregar os arquivo com as teclas UP e DOWN
        int linhaSelecionada = 0;
        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            linhaSelecionada = jtbMusics.getSelectedRow() + 1;
        } else if (evt.getKeyCode() == KeyEvent.VK_UP && jtbMusics.getSelectedRow() > 0) {
            linhaSelecionada = jtbMusics.getSelectedRow() - 1;
        }

        getArquivoSelecionado(linhaSelecionada);
    }//GEN-LAST:event_jtbMusicsKeyPressed

    private void jtbMusicsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbMusicsMouseClicked
        //Rotina para carregar os arquivos selecionados com o click.
        int linhaSelecionada = 0;
        linhaSelecionada = jtbMusics.getSelectedRow();
        getArquivoSelecionado(linhaSelecionada);
    }//GEN-LAST:event_jtbMusicsMouseClicked

    private void ckAlteracaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckAlteracaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ckAlteracaoActionPerformed

    private void ckAlteracaoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ckAlteracaoMouseClicked
        // TODO add your handling code here:
        if (ckAlteracao.isSelected()) {
            edTitulo.setEditable(true);
            edArtista.setEditable(true);
            edAlbum.setEditable(true);
            edComentario.setEditable(true);
            edAno.setEditable(true);
            cmbGenero.setEnabled(true);
            edNroFaixa.setEditable(true);
            btGavar.setEnabled(true);
            edFlagTrilha.setEditable(true);
            btRemoveMarcacoes.setEnabled(true);

            lbAlteracao.setText("Modo Alteração");
        } else {
            edTitulo.setEditable(false);
            edAlbum.setEditable(false);
            edArtista.setEditable(false);
            edComentario.setEditable(false);
            edAno.setEditable(false);
            cmbGenero.setEnabled(false);
            edNroFaixa.setEditable(false);
            btGavar.setEnabled(false);
            edFlagTrilha.setEditable(false);
            btRemoveMarcacoes.setEnabled(false);

            lbAlteracao.setText(" ");
        }
    }//GEN-LAST:event_ckAlteracaoMouseClicked

    private void btGavarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btGavarActionPerformed
        // TODO add your handling code here:
        if (mp3 == null) {
            mp3 = new ID3V1_1();
        }

        if (!validarCampos()) {
            return;
        }

        mp3.setArtista(edArtista.getText());
        mp3.setAlbum(edAlbum.getText());
        mp3.setTituloMusica(edTitulo.getText());
        mp3.setComentario(edComentario.getText());
        mp3.setAno(edAno.getText());
        mp3.setGenero(cmbGenero.getSelectedIndex());

        if (edFlagTrilha.getText().isEmpty()) {
            mp3.setFlagDeTrilha(0);
        } else {
            mp3.setFlagDeTrilha(Integer.parseInt(edFlagTrilha.getText()));
        }

        if (edNroFaixa.getText().isEmpty()) {
            mp3.setNroFaixa(0);
        } else {
            mp3.setNroFaixa(Integer.parseInt(edNroFaixa.getText()));
        }

        int row = jtbMusics.getSelectedRow();

        try {
            editor = new Editor(arrFiles.get(row).getAbsolutePath());
            editor.inserirMarcacoes(mp3);
            JOptionPane.showMessageDialog(null, "Dados gravados com sucesso.", "Aviso", JOptionPane.INFORMATION_MESSAGE);

        } catch (FileNotFoundException ex) {
            Logger.getLogger(UIEditor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(UIEditor.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btGavarActionPerformed

    private void btRemoveMarcacoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRemoveMarcacoesActionPerformed
        // TODO add your handling code here:
        int row = jtbMusics.getSelectedRow();

        int op = JOptionPane.showConfirmDialog(null, "Esta ação irá remover todas as marcações do arquivo, deseja contiuar?", "Atenção!", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (op == JOptionPane.OK_OPTION) {
            try {
                editor = new Editor(arrFiles.get(row).getAbsolutePath());
                editor.removerMarcacoes();

                edTitulo.setText("");
                edArtista.setText("");
                edAlbum.setText("");
                edAno.setText("");
                edComentario.setText("");
                edFlagTrilha.setText("");
                edNroFaixa.setText("");
                cmbGenero.setSelectedIndex(0);

            } catch (FileNotFoundException ex) {
                Logger.getLogger(UIEditor.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(UIEditor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btRemoveMarcacoesActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            // Rotina para recuperar o ultimo estado da tela, caso não houver registro mantém o tamhho padrão.
            if (new File(dirPosTela).length() > 0) {
                Rectangle pos = Recursos.getPosTela(dirPosTela);
                setBounds(pos);
            }
        } catch (IOException ex) {
            Logger.getLogger(UIEditor.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        //Obtem as dimensões atuais da tela.
        Rectangle pos = new Rectangle();
        pos = getBounds();
        //Grava em arquivo as dimensões da tela.
        try {
            Recursos.setPosTela(pos, dirPosTela);
        } catch (IOException ex) {
            Logger.getLogger(UIEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosing

    private void getArquivoSelecionado(int linhaSelecionada) {

        if (linhaSelecionada >= arrFiles.size()) {
            return;
        }

        try {
            editor = new Editor(arrFiles.get(linhaSelecionada).getAbsolutePath());

            mp3 = editor.getMarcacoes();

            if (mp3 == null) {
                lbMarcacao.setText("O arquivo não possui marcações!");
                edTitulo.setText("");
                edArtista.setText("");
                edAlbum.setText("");
                edAno.setText("");
                edComentario.setText("");
                edFlagTrilha.setText("");
                edNroFaixa.setText("");
                cmbGenero.setSelectedIndex(0);
                return;
            }

            lbMarcacao.setText(" ");
            edTitulo.setText(mp3.getTituloMusica());
            edArtista.setText(mp3.getArtista());
            edAlbum.setText(mp3.getAlbum());
            edAno.setText(mp3.getAno());
            edComentario.setText(mp3.getComentario());
            edFlagTrilha.setText(String.valueOf(mp3.getFlagDeTrilha()));
            edNroFaixa.setText(String.valueOf(mp3.getNroFaixa()));
            cmbGenero.setSelectedIndex(mp3.getGenero());

        } catch (FileNotFoundException ex) {
            Logger.getLogger(UIEditor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(UIEditor.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private boolean validarCampos() {

        if (edTitulo.getText().length() > 30) {
            JOptionPane.showMessageDialog(null, "Informe no máximo 30 caracteres.");
            edTitulo.setText("");
            edTitulo.setFocusable(true);
            return false;
        }

        if (edArtista.getText().length() > 30) {
            JOptionPane.showMessageDialog(null, "Infome no máximo 30 caracteres.");
            edArtista.setText("");
            edArtista.setFocusable(true);
            return false;
        }

        if (edAlbum.getText().length() > 30) {
            JOptionPane.showMessageDialog(null, "Informe no máximo 30 caracteres.");
            edAlbum.setText("");
            edAlbum.setFocusable(true);
            return false;
        }

        if (edAno.getText().length() > 4) {
            JOptionPane.showMessageDialog(null, "Informe no máximo 4 caracteres.");
            edAno.setText("");
            edAno.setFocusable(true);
            return false;
        }

        if (edComentario.getText().length() > 28) {
            JOptionPane.showMessageDialog(null, "Informe no máximo 28 caracteres.");
            edComentario.setText("");
            edComentario.setFocusable(true);
            return false;
        }

        return true;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UIEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UIEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UIEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UIEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UIEditor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button btAbrir;
    private javax.swing.JButton btGavar;
    private javax.swing.JButton btRemoveMarcacoes;
    private javax.swing.JCheckBox ckAlteracao;
    private javax.swing.JComboBox<String> cmbGenero;
    private javax.swing.JTextField edAlbum;
    private javax.swing.JTextField edAno;
    private javax.swing.JTextField edArtista;
    private javax.swing.JTextField edComentario;
    private javax.swing.JTextField edFlagTrilha;
    private javax.swing.JTextField edNroFaixa;
    private javax.swing.JTextField edTitulo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTable jtbMusics;
    private javax.swing.JLabel lbAlteracao;
    private javax.swing.JLabel lbMarcacao;
    // End of variables declaration//GEN-END:variables

    @Override
    public void windowOpened(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowClosing(WindowEvent e) {
        // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowClosed(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowIconified(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowActivated(WindowEvent e) {
        // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
